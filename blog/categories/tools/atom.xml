<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tools | Abhishek Mulay]]></title>
  <link href="abhishekmulay.com/blog/categories/tools/atom.xml" rel="self"/>
  <link href="abhishekmulay.com/"/>
  <updated>2015-02-13T15:57:26+05:30</updated>
  <id>abhishekmulay.com/</id>
  <author>
    <name><![CDATA[Abhishek Mulay]]></name>
    <email><![CDATA[abhishekmulay1991@yahoo.in]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Skipping Library / Framework Javascript Code While Debugging]]></title>
    <link href="abhishekmulay.com/blog/2014/10/25/skipping-library-framework-javascript-while-debugging/"/>
    <updated>2014-10-25T00:00:00+05:30</updated>
    <id>abhishekmulay.com/blog/2014/10/25/skipping-library-framework-javascript-while-debugging</id>
    <content type="html"><![CDATA[<p>Whenever I am debugging java code , I really love the feature where I could tell Eclipse not to step into any library or framework class while in debug mode.</p>

<p>For example , suppose you are debuggin a class which is using Spring data to persist your data into the database.You don’t want to step into the library code while debuggin because it is very less likely that there will be some bug in that code as it is already tested and used by many developers ! ( Perks of using open source technology :-) ! )</p>

<p>I used to get annoyed whenever my debugger stepped into jQuery code while I was looking for errors in my own script.I always wished something similar was available for javascript. </p>

<!-- more -->

<p>Guess what , our dear chrome has same feature for us.</p>

<ol>
  <li>
    <p>Open developer tools either by right clicking and selecting inspect element or from menu bar.
<code>Window &gt; View &gt; Developer &gt; Developer tools</code> and open settings by clicking on the little wheel icon.</p>
  </li>
  <li>
    <p>Select <code>General</code> from left section and click on the control that says <code>Manage framework blackboxing</code></p>
  </li>
  <li>
    <p>Add the patterns. For example
<code>jquery*.js|module.js|html5shiv.js</code>
This is a regular expression so mind your typos fellas!</p>
  </li>
  <li>
    <p>Select behaviour as <code>Blackbox</code>.</p>
  </li>
</ol>

<p>Now you are ready to roll!</p>

<p>Happy debugging !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Breakpoints on DOM Mutation Events]]></title>
    <link href="abhishekmulay.com/blog/2014/10/25/breakpoints-on-DOM-mutation-events/"/>
    <updated>2014-10-25T00:00:00+05:30</updated>
    <id>abhishekmulay.com/blog/2014/10/25/breakpoints-on-DOM-mutation-events</id>
    <content type="html"><![CDATA[<p>Recently I had a task to find out why a certain feature in our website was broken and making the UI look fugly.
So after a quick round of debugging in chrome dev tools I was able to figure out that the styles were inline ,some javascript library or user script was adding these rogue styles which were causing the trouble. </p>

<p>Now any front end enginner worth his salt will tell you that it is not an easy task to debug this scenario.
You can easily debug what javascript is running and where it is making changes if you know the responsible js file , but without knowing the file it is nearly impossible to  trace back the source of the attached styles.
<!-- more --></p>

<p>After a day of excruciating debugging efforts , I found out this hidden gem which since then has become my most loved and most used feature of chrome devtools.</p>

<p><a class="external-link" href="https://developer.chrome.com/devtools/docs/javascript-debugging#breakpoints-mutation-events">Adding DOM mutation breakpoints in chrome devtools</a></p>

<p>A similar feature is available in Firefox as well.</p>

<p><a class="external-link" href="http://getfirebug.com/doc/breakpoints/demo.html#html ">Adding DOM mutation breakpoints in Firebug</a>	</p>

<p>This feature basically , in a way , lets you put break points on the HTML nodes which you see in the Elements tab , so when any javascript makes changes to any property of that node , you will hit the break point and you will now have the access to stacktrace and you can find out the responsible code in couple of mouse clicks .
Isn’t it awesome ?</p>

<h2 id="demo">Demo</h2>

<p><pre class="codepen" data-height="400" data-type="css" data-href="xbwLrR" data-user="abhishekmulay"><code> </code></pre>
<script async src="http://codepen.io:/assets/embed/ei.js"></script></p>

<h4 id="happy-debugging-people">Happy debugging people!</h4>
]]></content>
  </entry>
  
</feed>
